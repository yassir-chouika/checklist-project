import { useState } from "react";

const ContentManager = () => {
  // State for storing all content items
  const [items, setItems] = useState([]);
  // State for the new content input field
  const [newContent, setNewContent] = useState("");
  
  // Adds a new item to the items array if content isn't empty
  const addItem = () => 
    newContent.trim() && setItems([...items, { id: Date.now(), content: newContent }]) || setNewContent("");

  // Removes an item from items array by filtering out the matching id
  const deleteItem = (id) => setItems(items.filter(item => item.id !== id));

  // Updates an item's content by mapping through items and updating the matching id
  const modifyItem = (id, newValue) => 
    setItems(items.map(item => item.id === id ? { ...item, content: newValue } : item));

  return (
    <div className="p-4">
      {/* Input section for adding new items */}
      <div className="flex gap-4 mb-6">
        <input
          type="text"
          value={newContent}
          onChange={(e) => setNewContent(e.target.value)}
          className="flex-1 p-2 rounded-lg border"
          placeholder="Type something..."
        />
        <button
          onClick={addItem}
          className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
        >
          Add
        </button>
      </div>

      {/* Container for all content items */}
      <div className="space-y-4">
        {items.map((item) => (
          <ContentItem
            key={item.id}
            item={item}
            onDelete={deleteItem}
            onModify={modifyItem}
          />
        ))}
      </div>
    </div>
  );
};

// Subcomponent for individual content items
const ContentItem = ({ item, onDelete, onModify }) => {
  // State to track if item is being edited
  const [isEditing, setIsEditing] = useState(false);
  // State to store the content while editing
  const [editContent, setEditContent] = useState(item.content);

  // Saves the edited content if it's not empty
  const handleSave = () => 
    editContent.trim() && onModify(item.id, editContent) || setIsEditing(false);

  return (
    <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow hover:shadow-md transition-shadow">
      {/* Content display: shows input field when editing, text when not */}
      {isEditing ? (
        <input
          type="text"
          value={editContent}
          onChange={(e) => setEditContent(e.target.value)}
          onBlur={handleSave}
          onKeyDown={(e) => e.key === 'Enter' && handleSave()}
          className="flex-1 p-1 border rounded mr-4"
          autoFocus
        />
      ) : (
        <div className="flex-1 mr-4">{item.content}</div>
      )}
      
      {/* Action buttons */}
      <div className="flex gap-2">
        <button
          onClick={() => isEditing ? handleSave() : setIsEditing(true)}
          className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600"
        >
          {isEditing ? 'Save' : 'Modify'}
        </button>
        <button
          onClick={() => onDelete(item.id)}
          className="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600"
        >
          Delete
        </button>
      </div>
    </div>
  );
};

export default ContentManager;